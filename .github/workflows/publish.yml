name: Publish

on:
  push:
    branches:
      - main
      - ci/notarize

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2
      - name: set version env variable
        run: echo "CRATE_VERSION=$(cat Cargo.toml | sed -n 's/.*version = "\([^"]*\)".*/\1/p' | head -1)" >> $GITHUB_ENV
      - name: create release
        id: create_release
        uses: actions/create-release@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: app-v${{ env.CRATE_VERSION }}
          release_name: "Wallet CLI v${{ env.CRATE_VERSION }}"
          body: "See the assets to download this version and install."
          draft: true
          prerelease: false

  create-and-upload-assets:
    needs: create-release
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        #os: [ubuntu-latest, macos-latest, windows-latest]
        os: [macos-latest]
        include:
          - os: ubuntu-latest
            identifier: linux
            ext: ''
          - os: macos-latest
            identifier: macos
            ext: ''
          - os: windows-latest
            identifier: windows
            ext: .exe

    steps:
      - uses: actions/checkout@v2
      - name: install rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal

      # paho.mqtt requires openssl and OPENSSL_ROOT_DIR on macOS
      - name: Install OpenSSL (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
      
      - name: Install gon (macOS)
        # https://github.com/mitchellh/gon
        run: brew install mitchellh/gon/gon
        if: matrix.os == 'macos-latest'

      # paho.mqtt requires openssl and OPENSSL_ROOT_DIR on Windows
      - name: Install OpenSSL (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install openssl --no-progress
          echo "OPENSSL_ROOT_DIR=C:\Program Files\OpenSSL-Win64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # build the CLI
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      
      - name: Import code signing assets (macOS)
        # Based on https://github.com/Apple-Actions/import-codesign-certs/blob/master/src/security.ts
        run: |
          security create-keychain -p $KEYCHAIN_PASSWORD signing.keychain
          security set-keychain-settings -lut 3600 signing.keychain
          security unlock-keychain -p $KEYCHAIN_PASSWORD signing.keychain
          echo $MAC_CERT_BASE64 | base64 -D -o signing.p12
          security import signing.p12 -k signing.keychain -f pkcs12 -T "/usr/bin/codesign" -T "/usr/bin/security" -P $MAC_CERT_PASSWORD
          rm signing.p12
          security -q set-key-partition-list -S apple-tool:,apple: -k $KEYCHAIN_PASSWORD signing.keychain > /dev/null
          security -v list-keychains -s signing.keychain
          security find-identity -vp codesigning
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          MAC_CERT_BASE64: ${{ secrets.MAC_CERT_BASE64 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
        if: matrix.os == 'macos-latest'

      - name: Sign and notarize Wallet CLI binary (macOS)
        run: gon gon-config.json
        env:
          AC_USERNAME: ${{ secrets.ASC_APPLE_ID }}
          AC_PASSWORD: ${{ secrets.ASC_PASSWORD }}
        if: matrix.os == 'macos-latest'
      
      - name: Delete keychain (macOS)
        run: security delete-keychain signing.keychain
        # Run even if previous steps fail
        if: ${{ matrix.os == 'macos-latest' && always() }}

      # upload binary to the GH release
      - name: upload release asset (Windows/Linux)
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ${{ format('./target/release/wallet{0}', matrix.ext ) }}
          asset_name: ${{ format('wallet-{0}{1}', matrix.identifier, matrix.ext ) }}
          asset_content_type: application/octet-stream
        if: matrix.os == 'windows-latest' || matrix.os == 'ubuntu-latest'
      
      - name: Upload artifacts (macOS)
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: wallet.zip
          asset_name: ${{ format('wallet-{0}{1}', matrix.identifier, matrix.ext ) }}
          asset_content_type: application/octet-stream
        if: matrix.os == 'macos-latest'
